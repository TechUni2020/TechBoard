import type * as ts from 'typescript';
import type { TextRange } from './types';
export declare type ScriptSetupRanges = ReturnType<typeof parseScriptSetupRanges>;
export declare function parseScriptSetupRanges(ts: typeof import('typescript/lib/tsserverlibrary'), content: string, lang: string): {
    labels: (TextRange & {
        binarys: {
            parent: TextRange;
            vars: (TextRange & {
                isShortand: boolean;
                inRoot: boolean;
            })[];
            left: TextRange;
            right: undefined | (TextRange & {
                isComputedCall: boolean;
                withoutAs: TextRange;
                as: undefined | TextRange;
            });
        }[];
        label: TextRange;
        parent: TextRange;
    })[];
    bindings: TextRange[];
    dollars: number[];
    withDefaultsArg: TextRange | undefined;
    propsRuntimeArg: TextRange | undefined;
    propsTypeArg: TextRange | undefined;
    emitsRuntimeArg: TextRange | undefined;
    emitsTypeArg: TextRange | undefined;
};
export declare function parseBindingRanges(ts: typeof import('typescript/lib/tsserverlibrary'), sourceFile: ts.SourceFile): TextRange[];
export declare function parseRefSugarRanges(ts: typeof import('typescript/lib/tsserverlibrary'), content: string, lang: string): {
    refCalls: (TextRange & {
        vars: TextRange[];
        left: TextRange;
        rightExpression: undefined | TextRange;
        rightType: undefined | TextRange;
    })[];
    shorthandPropertys: TextRange[];
};
export declare function getStartEnd(node: ts.Node, sourceFile: ts.SourceFile): {
    start: number;
    end: number;
};
