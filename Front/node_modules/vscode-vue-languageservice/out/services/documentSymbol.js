"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const vscode = require("vscode-languageserver");
function register({ sourceFiles, getTsLs, htmlLs, getCssLs }) {
    return (uri) => {
        const sourceFile = sourceFiles.get(uri);
        if (!sourceFile)
            return;
        const document = sourceFile.getTextDocument();
        const vueResult = getVueResult(sourceFile);
        const tsResult = getTsResult(sourceFile);
        const htmlResult = getHtmlResult(sourceFile);
        const cssResult = getCssResult(sourceFile);
        // TODO: pug
        return [
            ...vueResult,
            ...tsResult,
            ...htmlResult,
            ...cssResult,
        ];
        function getVueResult(sourceFile) {
            const result = [];
            const desc = sourceFile.getDescriptor();
            if (desc.template) {
                result.push({
                    name: '<template>',
                    kind: vscode.SymbolKind.Module,
                    location: vscode.Location.create(uri, vscode.Range.create(document.positionAt(desc.template.loc.start), document.positionAt(desc.template.loc.end))),
                });
            }
            if (desc.script) {
                result.push({
                    name: '<script>',
                    kind: vscode.SymbolKind.Module,
                    location: vscode.Location.create(uri, vscode.Range.create(document.positionAt(desc.script.loc.start), document.positionAt(desc.script.loc.end))),
                });
            }
            if (desc.scriptSetup) {
                result.push({
                    name: '<script setup>',
                    kind: vscode.SymbolKind.Module,
                    location: vscode.Location.create(uri, vscode.Range.create(document.positionAt(desc.scriptSetup.loc.start), document.positionAt(desc.scriptSetup.loc.end))),
                });
            }
            for (const style of desc.styles) {
                result.push({
                    name: `<${['style', style.scoped ? 'scoped' : undefined, style.module ? 'module' : undefined].filter(shared.notEmpty).join(' ')}>`,
                    kind: vscode.SymbolKind.Module,
                    location: vscode.Location.create(uri, vscode.Range.create(document.positionAt(style.loc.start), document.positionAt(style.loc.end))),
                });
            }
            for (const customBlock of desc.customBlocks) {
                result.push({
                    name: `<${customBlock.type}>`,
                    kind: vscode.SymbolKind.Module,
                    location: vscode.Location.create(uri, vscode.Range.create(document.positionAt(customBlock.loc.start), document.positionAt(customBlock.loc.end))),
                });
            }
            return result;
        }
        function getTsResult(sourceFile) {
            const result = [];
            const map = new Map();
            for (const sourceMap of sourceFile.getTsSourceMaps()) {
                if (!sourceMap.capabilities.documentSymbol)
                    continue;
                let symbols = getTsLs(sourceMap.lsType).findWorkspaceSymbols(sourceMap.mappedDocument.uri);
                for (const s of symbols) {
                    const vueRange = sourceMap.getSourceRange(s.location.range.start, s.location.range.end);
                    if (vueRange) {
                        map.set(`${sourceMap.mappedDocument.offsetAt(s.location.range.start)}:${sourceMap.mappedDocument.offsetAt(s.location.range.end)}:${s.kind}:${s.name}`, {
                            ...s,
                            location: vscode.Location.create(uri, vueRange),
                        });
                    }
                }
            }
            for (const info of map.values()) {
                result.push(info);
            }
            return result;
        }
        function getHtmlResult(sourceFile) {
            const result = [];
            const sourceMaps = sourceFile.getHtmlSourceMaps();
            for (const sourceMap of sourceMaps) {
                let symbols = htmlLs.findDocumentSymbols(sourceMap.mappedDocument, sourceMap.htmlDocument);
                if (!symbols)
                    continue;
                for (const s of symbols) {
                    const vueRange = sourceMap.getSourceRange(s.location.range.start, s.location.range.end);
                    if (vueRange) {
                        result.push({
                            ...s,
                            location: vscode.Location.create(uri, vueRange),
                        });
                    }
                }
            }
            return result;
        }
        function getCssResult(sourceFile) {
            const result = [];
            const sourceMaps = sourceFile.getCssSourceMaps();
            for (const sourceMap of sourceMaps) {
                const cssLs = getCssLs(sourceMap.mappedDocument.languageId);
                if (!cssLs || !sourceMap.stylesheet)
                    continue;
                let symbols = cssLs.findDocumentSymbols(sourceMap.mappedDocument, sourceMap.stylesheet);
                if (!symbols)
                    continue;
                for (const s of symbols) {
                    const vueRange = sourceMap.getSourceRange(s.location.range.start, s.location.range.end);
                    if (vueRange) {
                        result.push({
                            ...s,
                            location: vscode.Location.create(uri, vueRange),
                        });
                    }
                }
            }
            return result;
        }
    };
}
exports.register = register;
//# sourceMappingURL=documentSymbol.js.map