"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTypeScriptVersion = exports.loadTypescriptLocalized = exports.loadTypescript = exports.getVscodeTypescriptLocalizedPath = exports.getVscodeTypescriptPath = exports.getWorkspaceTypescriptLocalizedPath = exports.getWorkspaceTypescriptPath = exports.createTsLanguageService = void 0;
const fs = require("fs");
const path = require("upath");
function createTsLanguageService(ts, ShPlugin, _host) {
    var _a, _b;
    // @ts-ignore
    const importSuggestionsCache = (_b = (_a = ts.Completions) === null || _a === void 0 ? void 0 : _a.createImportSuggestionsForFileCache) === null || _b === void 0 ? void 0 : _b.call(_a);
    const host = {
        ..._host,
        // @ts-ignore
        // TODO: crash on 'addListener' from 'node:process', reuse because TS has same problem
        getImportSuggestionsCache: () => importSuggestionsCache,
    };
    const shPlugin = ShPlugin({ typescript: ts });
    let languageService = ts.createLanguageService(host);
    languageService = shPlugin.decorate(languageService);
    return languageService;
}
exports.createTsLanguageService = createTsLanguageService;
function getWorkspaceTypescriptPath(tsdk, workspaceFolders) {
    if (path.isAbsolute(tsdk)) {
        const tsPath = path.join(tsdk, 'tsserverlibrary.js');
        if (fs.existsSync(tsPath)) {
            return tsPath;
        }
    }
    else if (workspaceFolders) {
        for (const folder of workspaceFolders) {
            const tsPath = path.join(folder.uri.fsPath, tsdk, 'tsserverlibrary.js');
            if (fs.existsSync(tsPath)) {
                return tsPath;
            }
        }
    }
}
exports.getWorkspaceTypescriptPath = getWorkspaceTypescriptPath;
function getWorkspaceTypescriptLocalizedPath(tsdk, lang, workspaceFolders) {
    if (path.isAbsolute(tsdk)) {
        const tsPath = path.join(tsdk, lang, 'diagnosticMessages.generated.json');
        if (fs.existsSync(tsPath)) {
            return tsPath;
        }
    }
    else if (workspaceFolders) {
        for (const folder of workspaceFolders) {
            const tsPath = path.join(folder.uri.fsPath, tsdk, lang, 'diagnosticMessages.generated.json');
            if (fs.existsSync(tsPath)) {
                return tsPath;
            }
        }
    }
}
exports.getWorkspaceTypescriptLocalizedPath = getWorkspaceTypescriptLocalizedPath;
function getVscodeTypescriptPath(appRoot) {
    return path.join(appRoot, 'extensions', 'node_modules', 'typescript', 'lib', 'typescript.js');
}
exports.getVscodeTypescriptPath = getVscodeTypescriptPath;
function getVscodeTypescriptLocalizedPath(appRoot, lang) {
    const tsPath = path.join(appRoot, 'extensions', 'node_modules', 'typescript', 'lib', lang, 'diagnosticMessages.generated.json');
    if (fs.existsSync(tsPath)) {
        return tsPath;
    }
}
exports.getVscodeTypescriptLocalizedPath = getVscodeTypescriptLocalizedPath;
function loadTypescript(tsPath) {
    return require(path.toUnix(tsPath));
}
exports.loadTypescript = loadTypescript;
function loadTypescriptLocalized(tsPath) {
    if (fs.existsSync(tsPath)) {
        return require(path.toUnix(tsPath));
    }
}
exports.loadTypescriptLocalized = loadTypescriptLocalized;
function getTypeScriptVersion(serverPath) {
    if (!fs.existsSync(serverPath)) {
        return undefined;
    }
    const p = serverPath.split(path.sep);
    if (p.length <= 2) {
        return undefined;
    }
    const p2 = p.slice(0, -2);
    const modulePath = p2.join(path.sep);
    let fileName = path.join(modulePath, 'package.json');
    if (!fs.existsSync(fileName)) {
        // Special case for ts dev versions
        if (path.basename(modulePath) === 'built') {
            fileName = path.join(modulePath, '..', 'package.json');
        }
    }
    if (!fs.existsSync(fileName)) {
        return undefined;
    }
    const contents = fs.readFileSync(fileName).toString();
    let desc = null;
    try {
        desc = JSON.parse(contents);
    }
    catch (err) {
        return undefined;
    }
    if (!desc || !desc.version) {
        return undefined;
    }
    return desc.version;
}
exports.getTypeScriptVersion = getTypeScriptVersion;
//# sourceMappingURL=ts.js.map